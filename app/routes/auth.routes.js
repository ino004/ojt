import express from "express";
import {
  signup,
  signin,
  forgotPassword,
  resetPasswordWithOtp,
  refreshToken,
  verifyOtp,
} from "../controllers/auth.controller.js";
import { verifySignUp } from "../middlewares/index.js";

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Auth
 *   description: API x√°c th·ª±c ng∆∞·ªùi d√πng
 */

/**
 * @swagger
 * /api/auth/signup:
 *   post:
 *     summary: ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 example: johndoe
 *               email:
 *                 type: string
 *                 example: johndoe@example.com
 *               password:
 *                 type: string
 *                 example: 123456
 *               roles:
 *                 type: array
 *                 items:
 *                   type: string
 *                 example: ["user"]
 *     responses:
 *       200:
 *         description: ƒêƒÉng k√Ω th√†nh c√¥ng
 *       400:
 *         description: Th√¥ng tin kh√¥ng h·ª£p l·ªá
 */
router.post(
  "/signup",
  [
    (req, res, next) => {
      console.log("üö¶ Middleware ch·∫°y tr∆∞·ªõc signup, body =", req.body);
      next();
    },
    verifySignUp.checkDuplicateUsernameOrEmail,
    verifySignUp.checkRolesExisted,
  ],
  signup
);
/**
 * @swagger
 * /api/auth/verify-otp:
 *   post:
 *     tags:
 *       - Auth
 *     summary: X√°c th·ª±c OTP c·ªßa ng∆∞·ªùi d√πng
 *     description: Endpoint n√†y d√πng ƒë·ªÉ x√°c th·ª±c m√£ OTP ƒë√£ g·ª≠i t·ªõi email c·ªßa ng∆∞·ªùi d√πng.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - otp
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: "user@example.com"
 *               otp:
 *                 type: string
 *                 example: "123456"
 *     responses:
 *       '200':
 *         description: OTP h·ª£p l·ªá, x√°c th·ª±c th√†nh c√¥ng
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "OTP verified successfully"
 *                 token:
 *                   type: string
 *                   example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
 *       '400':
 *         description: Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá (thi·∫øu tr∆∞·ªùng, OTP sai ƒë·ªãnh d·∫°ng)
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Invalid request"
 *       '401':
 *         description: OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "OTP is incorrect or expired"
 *       '500':
 *         description: L·ªói server
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 message:
 *                   type: string
 *                   example: "Internal server error"
 */
router.post("/verify-otp", verifyOtp);



/**
 * @swagger
 * /api/auth/signin:
 *   post:
 *     summary: ƒêƒÉng nh·∫≠p h·ªá th·ªëng
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 example: johndoe
 *               password:
 *                 type: string
 *                 example: 123456
 *     responses:
 *       200:
 *         description: ƒêƒÉng nh·∫≠p th√†nh c√¥ng
 *       401:
 *         description: Sai th√¥ng tin ƒëƒÉng nh·∫≠p
 */
router.post("/signin", signin);

/**
 * @swagger
 * /api/auth/forgot-password:
 *   post:
 *     summary: Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 example: johndoe@example.com
 *     responses:
 *       200:
 *         description: OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email
 *       404:
 *         description: Email kh√¥ng t·ªìn t·∫°i
 */
router.post("/forgot-password", forgotPassword);

/**
 * @swagger
 * /api/auth/reset-password-otp:
 *   post:
 *     summary: ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u b·∫±ng OTP
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 example: johndoe@example.com
 *               otp:
 *                 type: string
 *                 example: "123456"
 *               newPassword:
 *                 type: string
 *                 example: newpassword123
 *     responses:
 *       200:
 *         description: M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng
 *       400:
 *         description: OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
 */
router.post("/reset-password-otp", resetPasswordWithOtp);

/**
 * @swagger
 * /api/auth/refresh-token:
 *   post:
 *     summary: L·∫•y access token m·ªõi t·ª´ refresh token
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               refreshToken:
 *                 type: string
 *                 example: your-refresh-token
 *     responses:
 *       200:
 *         description: Tr·∫£ v·ªÅ access token m·ªõi
 *       403:
 *         description: Refresh token kh√¥ng h·ª£p l·ªá
 */
router.post("/refresh-token", refreshToken);

export default router;