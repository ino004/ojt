import bcrypt from "bcryptjs";
import User from "../models/user.model.js";
import Role from "../models/role.model.js";


export const allAccess = (req, res) => {
  res.status(200).send("Public Content.");
};

export const userBoard = (req, res) => {
  res.status(200).send("User Content.");
};

export const adminBoard = (req, res) => {
  res.status(200).send("Admin Content.");
};

export const moderatorBoard = (req, res) => {
  res.status(200).send("Moderator Content.");
};


// üìç L·∫•y t·∫•t c·∫£ user (ch·ªâ l·∫•y user ch∆∞a b·ªã x√≥a)
export const getAllUsers = async (req, res) => {
  try {
    const users = await User.find({ isDeleted: false }).populate("roles", "name");
    res.status(200).json(users);
  } catch (err) {
    console.error("‚ùå [GET USERS] Error:", err);
    res.status(500).json({ message: err.message });
  }
};

// üìç L·∫•y user theo ID (ch·ªâ l·∫•y n·∫øu ch∆∞a b·ªã x√≥a)
export const getUserById = async (req, res) => {
  try {
    const user = await User.findOne({ _id: req.params.id, isDeleted: false }).populate("roles", "name");
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a." });
    res.status(200).json(user);
  } catch (err) {
    console.error("‚ùå [GET USER BY ID] Error:", err);
    res.status(500).json({ message: err.message });
  }
};

// üìç T·∫°o user m·ªõi (Admin d√πng)
export const createUser = async (req, res) => {
  try {
    const { username, email, password, roles } = req.body;

    // Ki·ªÉm tra email t·ªìn t·∫°i
    const existing = await User.findOne({ email, isDeleted: false });
    if (existing) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i." });

    const user = new User({
      username,
      email,
      password: bcrypt.hashSync(password, 8),
      roles,
    });

    await user.save();
    res.status(201).json({ message: "T·∫°o user th√†nh c√¥ng!", user });
  } catch (err) {
    console.error("‚ùå [CREATE USER] Error:", err);
    res.status(500).json({ message: err.message });
  }
};

// üìç C·∫≠p nh·∫≠t user
export const updateUser = async (req, res) => {
  try {
    const { username, email, password, roles, isVerified } = req.body;
    const user = await User.findById(req.params.id);
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i." });

    if (username) user.username = username;
    if (email) user.email = email;
    if (typeof isVerified !== "undefined") user.isVerified = isVerified;
    if (password) user.password = bcrypt.hashSync(password, 8);

    // Convert role names sang ObjectId
    if (roles && roles.length > 0) {
      const roleDocs = await Role.find({ name: { $in: roles } });
      user.roles = roleDocs.map(r => r._id);
    }

    await user.save();
    res.status(200).json({ message: "C·∫≠p nh·∫≠t user th√†nh c√¥ng!", user });
  } catch (err) {
    console.error("‚ùå [UPDATE USER] Error:", err);
    res.status(500).json({ message: err.message });
  }
};

// üìç X√≥a user (soft delete ‚Üí set isDeleted = true)
export const deleteUser = async (req, res) => {
  try {
    const user = await User.findByIdAndUpdate(
      req.params.id,
      { isDeleted: true },
      { new: true }
    );
    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i." });

    res.status(200).json({ message: "User ƒë√£ b·ªã ·∫©n (soft delete)!", user });
  } catch (err) {
    console.error("‚ùå [DELETE USER] Error:", err);
    res.status(500).json({ message: err.message });
  }
};
// üìç Kh√¥i ph·ª•c user ƒë√£ x√≥a (soft delete)
export const restoreUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);

    if (!user) return res.status(404).json({ message: "User kh√¥ng t·ªìn t·∫°i." });
    if (!user.isDeleted) return res.status(400).json({ message: "User n√†y ch∆∞a b·ªã x√≥a." });

    user.isDeleted = false;
    await user.save();

    res.status(200).json({ message: "Kh√¥i ph·ª•c user th√†nh c√¥ng!", user });
  } catch (err) {
    console.error("‚ùå [RESTORE USER] Error:", err);
    res.status(500).json({ message: err.message });
  }
};